<apex:page standardController="Opportunity" extensions="unleashed.SendOpportunityToUnleashedController" action="{!onPageLoad}" showHeader="true" sidebar="true" docType="html-5.0">

<apex:outputPanel id="messages">
  <apex:pageMessages />
</apex:outputPanel>

<apex:sectionHeader subtitle="{!OpportunityObject.name}" title="Warehouse Selection">
</apex:sectionHeader>

    <style>
        .odd {
            background-color: #FAFAFA;
        }
        .even {
            background-color: #FFF;
        }
        .text-center {
            text-align: center;
        } 
        .text-right {
            text-align: right;
        }
        .red {
            color: red;
        }
    </style>
    <apex:form >
    	<apex:pageBlock >
    		<apex:pageBlockButtons >
				<apex:commandButton value="Return to Opportunity" action="{!cancel}"/>
				<apex:commandButton value="Next" action="{!confirmWarehouseAndGo}"/>
			</apex:pageBlockButtons>

            <apex:pageBlockTable id="lineItemsArea" var="lineItem" value="{!lineItems}" headerClass="headerRow text-center" rowClasses="even,odd">

                <apex:facet name="header"><span id="replaceMe">&nbsp;</span></apex:facet>

                <apex:column >
                    <apex:facet name="header">Product</apex:facet>
                    <apex:outputText value="{!lineItem.PricebookEntry.Name}"/>
                </apex:column>
                <apex:column styleClass="text-right" headerClass="text-right">
                    <apex:facet name="header">Quantity</apex:facet>
                    <apex:outputText value="{!lineItem.Quantity}"/>
                </apex:column>

                <apex:repeat var="warehouse" value="{!warehouseWrappers}">
                    <apex:column styleClass="text-right col-{!warehouse.warehouse.Id}" headerClass="text-right">
                        <apex:facet name="header">{!warehouse.Name}</apex:facet>
                        <apex:outputPanel rendered="{!ISNULL(warehouse.values[lineItem.Id].Warehouse__c)}" style="color:#c0c0c0;">
                            <apex:outputText value="-"/>
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!NOT(ISNULL(warehouse.values[lineItem.Id].Warehouse__c))}" styleClass="{!IF(warehouse.values[lineItem.Id].Available_Qty__c < lineItem.Quantity, 'red', '')}">
                            <apex:outputText value="{0,number,#,###.##}">
                                <apex:param value="{!warehouse.values[lineItem.Id].Available_Qty__c}"/>
                            </apex:outputText>
                        </apex:outputPanel>
                    </apex:column>
                </apex:repeat>
            </apex:pageBlockTable>

			<apex:pageBlockSection >
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="Please select a warehouse: "/>
                    <apex:outputPanel >
    					<apex:selectList id="warehouseSelect" value="{!selectedWarehouseId}" size="1">
    						<apex:selectOptions value="{!warehouseSelectOptions}"/>
    						<apex:actionSupport action="{!checkStockLevels}" reRender="lineItemsArea,messages" event="onchange" oncomplete="insertHeader();" status="status"/>
    					</apex:selectList>
                        <apex:actionstatus id="status">
                            <apex:facet name="start">
                                <span class="waitingHolder">
                                    <img class="waitingImage" style="margin-left:5px;" width="16px" src="/img/loading32.gif" />
                                </span>
                            </apex:facet>
                        </apex:actionstatus>
                    </apex:outputPanel>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
		</apex:pageBlock>
	</apex:form>

    <script>

        /* 
         * Workaround to get two row header for the Warehouses, we use javascript to 
         * locate then manipulate the table headers generated by VisualForce.
         */
        function insertHeader() {
            var replaceMe = document.getElementById("replaceMe");
            var warehouseHeader = replaceMe.parentElement;
            var columns = warehouseHeader.colSpan;
            var warehouseColumns = columns - 2;
            warehouseHeader.colSpan = warehouseColumns;
            var newHeader = document.createElement("th");
            newHeader.colSpan = 2;
            var theRow = warehouseHeader.parentElement;
            theRow.insertBefore(newHeader, warehouseHeader);
            replaceMe.innerHTML = 'Warehouses';

            // Highlight the selected column
            var theSelect = document.querySelectorAll("[id$=warehouseSelect]")[0];
            var warehouseId = theSelect.value;

            changeStyle('.col-' + warehouseId);
        }

        /*
         * Toggle the background colour on the class named in 'selectorText'
         */
        function changeStyle(selectorText) {
            var found = false;
            var theRules = new Array();
            if (document.styleSheets[0].cssRules) {
                theRules = document.styleSheets[0].cssRules;
            } 
            else if (document.styleSheets[0].rules) {
                theRules = document.styleSheets[0].rules;
            }
            for (n in theRules) {
                var theRule = theRules[n];
                if (theRule && theRule.selectorText) {
                    if (theRule.selectorText.startsWith('.col-')) {
                        if (theRule.selectorText == selectorText)   {
                            theRule.style.backgroundColor = '#FFFFF3';
                            found = true;
                        } else {
                            theRule.style.backgroundColor = 'inherit';
                        }
                    } 
                }
            }
            if (!found) {
                var theRule = addCSSRule(selectorText);
                theRule.style.backgroundColor = '#FFFFF3';
            }
        }

        /*
         * It is nice if Strings have a startsWith function
         */
        if (typeof String.prototype.startsWith != 'function') {
            String.prototype.startsWith = function (str){
                return this.slice(0, str.length) == str;
            };
        }

        /*
         * Setup the header and column highlighting on page load.
         */
        if(window.attachEvent) {
            window.attachEvent('onload', insertHeader);
        } else {
            if(window.onload) {
                var curronload = window.onload;
                var newonload = function() {
                    curronload();
                    insertHeader();
                };
                window.onload = newonload;
            } else {
                window.onload = insertHeader;
            }
        }

        /*
         * Import some vanilla JS CSS Manipulating functions.
         */
        function getCSSRule(ruleName, deleteFlag) {               // Return requested style obejct
           ruleName=ruleName.toLowerCase();                       // Convert test string to lower case.
           if (document.styleSheets) {                            // If browser can play with stylesheets
              for (var i=0; i<document.styleSheets.length; i++) { // For each stylesheet
                 var styleSheet=document.styleSheets[i];          // Get the current Stylesheet
                 var ii=0;                                        // Initialize subCounter.
                 var cssRule=false;                               // Initialize cssRule. 
                 do {                                             // For each rule in stylesheet
                    if (styleSheet.cssRules) {                    // Browser uses cssRules?
                       cssRule = styleSheet.cssRules[ii];         // Yes --Mozilla Style
                    } else {                                      // Browser usses rules?
                       cssRule = styleSheet.rules[ii];            // Yes IE style. 
                    }                                             // End IE check.
                    if (cssRule)  {                               // If we found a rule...
                       if (cssRule.selectorText.toLowerCase()==ruleName) { //  match ruleName?
                          if (deleteFlag=='delete') {             // Yes.  Are we deleteing?
                             if (styleSheet.cssRules) {           // Yes, deleting...
                                styleSheet.deleteRule(ii);        // Delete rule, Moz Style
                             } else {                             // Still deleting.
                                styleSheet.removeRule(ii);        // Delete rule IE style.
                             }                                    // End IE check.
                             return true;                         // return true, class deleted.
                          } else {                                // found and not deleting.
                             return cssRule;                      // return the style object.
                          }                                       // End delete Check
                       }                                          // End found rule name
                    }                                             // end found cssRule
                    ii++;                                         // Increment sub-counter
                 } while (cssRule)                                // end While loop
              }                                                   // end For loop
           }                                                      // end styleSheet ability check
           return false;                                          // we found NOTHING!
        }                                                         // end getCSSRule 

        function killCSSRule(ruleName) {                          // Delete a CSS rule   
           return getCSSRule(ruleName,'delete');                  // just call getCSSRule w/delete flag.
        }                                                         // end killCSSRule

        function addCSSRule(ruleName) {                           // Create a new css rule
           if (document.styleSheets) {                            // Can browser do styleSheets?
              if (!getCSSRule(ruleName)) {                        // if rule doesnt exist...
                 if (document.styleSheets[0].addRule) {           // Browser is IE?
                    document.styleSheets[0].addRule(ruleName, null,0);      // Yes, add IE style
                 } else {                                         // Browser is IE?
                    document.styleSheets[0].insertRule(ruleName+' { }', 0); // Yes, add Moz style.
                 }                                                // End browser check
              }                                                   // End already exist check.
           }                                                      // End browser ability check.
           return getCSSRule(ruleName);                           // return rule we just created.
        } 

    </script>
</apex:page>